diff -Naur a/embed.fnc b/embed.fnc
--- a/embed.fnc	2024-08-26 17:16:34.000000000 +0200
+++ b/embed.fnc	2025-04-15 15:00:19.775268416 +0200
@@ -2730,6 +2730,9 @@
 				|NULLOK re_scream_pos_data *data
 Cp	|SV *	|re_intuit_string					\
 				|NN REGEXP  * const r
+
+p	|void	|release_RExC_state					\
+				|NN void *vstate
 Xp	|REGEXP *|re_op_compile |NULLOK SV ** const patternp		\
 				|int pat_count				\
 				|NULLOK OP *expr			\
@@ -2738,7 +2741,6 @@
 				|NULLOK bool *is_bare_re		\
 				|const U32 rx_flags			\
 				|const U32 pm_flags
-
 ATdp	|void	|repeatcpy	|NN char *to				\
 				|NN const char *from			\
 				|SSize_t len				\
diff -Naur a/embed.h b/embed.h
--- a/embed.h	2024-08-26 17:16:34.000000000 +0200
+++ b/embed.h	2025-04-15 15:00:19.775741404 +0200
@@ -1093,6 +1093,7 @@
 #   define refcounted_he_new_pv(a,b,c,d,e)      Perl_refcounted_he_new_pv(aTHX_ a,b,c,d,e)
 #   define refcounted_he_new_pvn(a,b,c,d,e,f)   Perl_refcounted_he_new_pvn(aTHX_ a,b,c,d,e,f)
 #   define refcounted_he_new_sv(a,b,c,d,e)      Perl_refcounted_he_new_sv(aTHX_ a,b,c,d,e)
+#   define release_RExC_state(a)                Perl_release_RExC_state(aTHX_ a)
 #   define report_evil_fh(a)                    Perl_report_evil_fh(aTHX_ a)
 #   define report_wrongway_fh(a,b)              Perl_report_wrongway_fh(aTHX_ a,b)
 #   define rpeep(a)                             Perl_rpeep(aTHX_ a)
diff -Naur a/pod/perldelta.pod b/pod/perldelta.pod
--- a/pod/perldelta.pod	2025-01-05 22:14:41.000000000 +0100
+++ b/pod/perldelta.pod	2025-04-15 15:20:58.619177597 +0200
@@ -110,6 +110,11 @@
 Fixed a double free error or possible memory leak when failing to compile
 certain regexps.  [L<GH #21661|https://github.com/Perl/perl5/issues/21661>]
 
+=item *
+
+Ensure cloning the save stack for fork emulation doesn't duplicate
+freeing the RExC state. [GH #23022]
+
 =back
 
 =head1 Acknowledgements
diff -Naur a/proto.h b/proto.h
--- a/proto.h	2024-08-26 17:16:35.000000000 +0200
+++ b/proto.h	2025-04-15 15:00:19.776311755 +0200
@@ -3797,6 +3797,12 @@
 #define PERL_ARGS_ASSERT_REGINITCOLORS
 
 PERL_CALLCONV void
+Perl_release_RExC_state(pTHX_ void *vstate)
+        __attribute__visibility__("hidden");
+#define PERL_ARGS_ASSERT_RELEASE_REXC_STATE     \
+        assert(vstate)
+
+PERL_CALLCONV void
 Perl_repeatcpy(char *to, const char *from, SSize_t len, IV count);
 #define PERL_ARGS_ASSERT_REPEATCPY              \
         assert(to); assert(from)
diff -Naur a/regcomp.c b/regcomp.c
--- a/regcomp.c	2024-10-06 18:02:55.000000000 +0200
+++ b/regcomp.c	2025-04-15 15:00:19.782348979 +0200
@@ -1308,15 +1308,19 @@
     return TRUE;
 }
 
-static void
-release_RExC_state(pTHX_ void *vstate) {
-    RExC_state_t *pRExC_state = (RExC_state_t *)vstate;
+#ifdef PERL_RE_BUILD_AUX
+
+void
+Perl_release_RExC_state(pTHX_ void *vstate) {
+    PERL_ARGS_ASSERT_RELEASE_REXC_STATE;
 
+    RExC_state_t *pRExC_state = (RExC_state_t *)vstate;
+    
     /* Any or all of these might be NULL.
 
        There's no point in setting them to NULL after the free, since
        pRExC_state is about to be released.
-     */
+    */
     SvREFCNT_dec(RExC_rx_sv);
     Safefree(RExC_open_parens);
     Safefree(RExC_close_parens);
@@ -1326,6 +1330,8 @@
     Safefree(pRExC_state);
 }
 
+#endif
+
 /*
  * Perl_re_op_compile - the perl internal RE engine's function to compile a
  * regular expression into internal code.
@@ -1427,7 +1433,8 @@
      * or error. */
     Newxz(pRExC_state, 1, RExC_state_t);
 
-    SAVEDESTRUCTOR_X(release_RExC_state, pRExC_state);
+    ENTER_with_name("re_op_compile");
+    SAVE_FREE_REXC_STATE(pRExC_state);
 
     DEBUG_r({
         /* and then initialize RExC_mysv1 and RExC_mysv2 early so if
@@ -1523,6 +1530,8 @@
                 "Precompiled pattern%s\n",
                     orig_rx_flags & RXf_SPLIT ? " for split" : ""));
 
+            LEAVE_with_name("re_op_compile");
+
             return (REGEXP*)re;
         }
     }
@@ -1538,7 +1547,9 @@
             pat = newSVpvn_flags(exp, plen, SVs_TEMP |
                                         (IN_BYTES ? 0 : SvUTF8(pat)));
         }
-        return CALLREGCOMP_ENG(eng, pat, orig_rx_flags);
+        REGEXP *re = CALLREGCOMP_ENG(eng, pat, orig_rx_flags);
+        LEAVE_with_name("re_op_compile");
+        return re;
     }
 
     /* ignore the utf8ness if the pattern is 0 length */
@@ -1588,6 +1599,7 @@
             Perl_re_printf( aTHX_  "%sSkipping recompilation of unchanged REx%s %s\n",
                           PL_colors[4], PL_colors[5], s);
         });
+        LEAVE_with_name("re_op_compile");
         return old_re;
     }
 
@@ -2424,6 +2436,7 @@
     if (old_re && SvREADONLY(old_re))
         SvREADONLY_on(Rx);
 #endif
+    LEAVE_with_name("re_op_compile");
     return Rx;
 }
 
diff -Naur a/regen/scope_types.pl b/regen/scope_types.pl
--- a/regen/scope_types.pl	2024-08-26 17:16:23.000000000 +0200
+++ b/regen/scope_types.pl	2025-04-15 15:14:48.523338401 +0200
@@ -137,6 +137,7 @@
 SAVEt_FREEPADNAME
 SAVEt_STRLEN_SMALL
 SAVEt_FREERCPV
+SAVEt_FREE_REXC_STATE
 
 /* two args */
 
diff -Naur a/scope.c b/scope.c
--- a/scope.c	2024-08-26 17:16:23.000000000 +0200
+++ b/scope.c	2025-04-15 15:00:19.778648853 +0200
@@ -1391,6 +1391,12 @@
             Safefree(a0.any_ptr);
             break;
 
+        case SAVEt_FREE_REXC_STATE:
+            a0 = ap[0];
+            if (a0.any_ptr)
+                release_RExC_state(a0.any_ptr);
+            break;
+
         case SAVEt_CLEARPADRANGE:
         {
             I32 i;
diff -Naur a/scope.h b/scope.h
--- a/scope.h	2024-08-26 17:16:23.000000000 +0200
+++ b/scope.h	2025-04-15 15:00:19.778785029 +0200
@@ -183,6 +183,11 @@
 #define SAVESETSVFLAGS(sv,mask,val) save_set_svflags(sv,mask,val)
 #define SAVEFREECOPHH(h)            save_pushptr((void *)(h), SAVEt_FREECOPHH)
 
+#if defined(PERL_CORE) || defined(PERL_EXT)
+#  define SAVE_FREE_REXC_STATE(p) \
+        save_pushptr((void *)(p), SAVEt_FREE_REXC_STATE)
+#endif
+
 #define SAVEDELETE(h,k,l) \
           save_delete(MUTABLE_HV(h), (char*)(k), (I32)(l))
 #define SAVEHDELETE(h,s) \
diff -Naur a/scope_types.h b/scope_types.h
--- a/scope_types.h	2024-08-26 17:16:23.000000000 +0200
+++ b/scope_types.h	2025-04-15 15:08:16.855450288 +0200
@@ -44,45 +44,46 @@
 #define SAVEt_FREEPADNAME         23
 #define SAVEt_STRLEN_SMALL        24
 #define SAVEt_FREERCPV            25
+#define SAVEt_FREE_REXC_STATE     26
 
 /* two args */
 
-#define SAVEt_AV                  26
-#define SAVEt_DESTRUCTOR          27
-#define SAVEt_DESTRUCTOR_X        28
-#define SAVEt_GENERIC_PVREF       29
-#define SAVEt_GENERIC_SVREF       30
-#define SAVEt_GP                  31
-#define SAVEt_GVSV                32
-#define SAVEt_HINTS               33
-#define SAVEt_HPTR                34
-#define SAVEt_HV                  35
-#define SAVEt_I32                 36
-#define SAVEt_INT                 37
-#define SAVEt_ITEM                38
-#define SAVEt_IV                  39
-#define SAVEt_LONG                40
-#define SAVEt_PPTR                41
-#define SAVEt_SAVESWITCHSTACK     42
-#define SAVEt_SHARED_PVREF        43
-#define SAVEt_SPTR                44
-#define SAVEt_STRLEN              45
-#define SAVEt_SV                  46
-#define SAVEt_SVREF               47
-#define SAVEt_VPTR                48
-#define SAVEt_ADELETE             49
-#define SAVEt_APTR                50
-#define SAVEt_RCPV                51
+#define SAVEt_AV                  27
+#define SAVEt_DESTRUCTOR          28
+#define SAVEt_DESTRUCTOR_X        29
+#define SAVEt_GENERIC_PVREF       30
+#define SAVEt_GENERIC_SVREF       31
+#define SAVEt_GP                  32
+#define SAVEt_GVSV                33
+#define SAVEt_HINTS               34
+#define SAVEt_HPTR                35
+#define SAVEt_HV                  36
+#define SAVEt_I32                 37
+#define SAVEt_INT                 38
+#define SAVEt_ITEM                39
+#define SAVEt_IV                  40
+#define SAVEt_LONG                41
+#define SAVEt_PPTR                42
+#define SAVEt_SAVESWITCHSTACK     43
+#define SAVEt_SHARED_PVREF        44
+#define SAVEt_SPTR                45
+#define SAVEt_STRLEN              46
+#define SAVEt_SV                  47
+#define SAVEt_SVREF               48
+#define SAVEt_VPTR                49
+#define SAVEt_ADELETE             50
+#define SAVEt_APTR                51
+#define SAVEt_RCPV                52
 
 /* three args */
 
-#define SAVEt_HELEM               52
-#define SAVEt_PADSV_AND_MORTALIZE 53
-#define SAVEt_SET_SVFLAGS         54
-#define SAVEt_GVSLOT              55
-#define SAVEt_AELEM               56
-#define SAVEt_DELETE              57
-#define SAVEt_HINTS_HH            58
+#define SAVEt_HELEM               53
+#define SAVEt_PADSV_AND_MORTALIZE 54
+#define SAVEt_SET_SVFLAGS         55
+#define SAVEt_GVSLOT              56
+#define SAVEt_AELEM               57
+#define SAVEt_DELETE              58
+#define SAVEt_HINTS_HH            59
 
 static const U8 leave_scope_arg_counts[] = {
     0, /* SAVEt_ALLOC               */
@@ -111,6 +112,7 @@
     1, /* SAVEt_FREEPADNAME         */
     1, /* SAVEt_STRLEN_SMALL        */
     1, /* SAVEt_FREERCPV            */
+    1, /* SAVEt_FREE_REXC_STATE     */
     2, /* SAVEt_AV                  */
     2, /* SAVEt_DESTRUCTOR          */
     2, /* SAVEt_DESTRUCTOR_X        */
@@ -146,6 +148,6 @@
     3  /* SAVEt_HINTS_HH            */
 };
 
-#define MAX_SAVEt 58
+#define MAX_SAVEt 59
 
 /* ex: set ro ft=c: */
diff -Naur a/sv.c b/sv.c
--- a/sv.c	2024-08-26 17:16:35.000000000 +0200
+++ b/sv.c	2025-04-15 15:00:19.780348974 +0200
@@ -15438,6 +15438,11 @@
             c = (char*)POPPTR(ss,ix);
             TOPPTR(nss,ix) = pv_dup_inc(c);
             break;
+        case SAVEt_FREE_REXC_STATE:
+            (void)POPPTR(ss, ix);
+            /* free only once */
+            TOPPTR(nss, ix) = NULL;
+            break;
         case SAVEt_FREERCPV:
             c = (char *)POPPTR(ss,ix);
             TOPPTR(nss,ix) = rcpv_copy(c);
